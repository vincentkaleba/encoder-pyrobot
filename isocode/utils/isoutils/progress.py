

from enum import Enum
import re
from typing import Any


def create_progress_bar(percent: float, length: int = 10) -> str:
    """
    Cr√©e une barre de progression visuelle.
    """
    progress = min(100, max(0, percent))
    filled = int(progress / 100 * length)
    empty = length - filled
    return f"[{'‚ñà' * filled}{'‚ñë' * empty}]"

def humanbytes(size: float) -> str:
    """
    Convertit des octets en format lisible
    """
    units = ["B", "Ko", "Mo", "Go", "To"]
    index = 0
    while size >= 1024 and index < len(units) - 1:
        size /= 1024
        index += 1
    return f"{size:.2f} {units[index]}"

# Dictionnaire de mapping pour la stylisation Unicode
TAG_PATTERN = re.compile(r'(<[^>]+>)')
UNICODE_MAPPING = {
    # Lettres
    'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á', 'f': 'Íú∞',
    'g': '…¢', 'h': ' ú', 'i': '…™', 'j': '·¥ä', 'k': '·¥ã', 'l': ' ü',
    'm': '·¥ç', 'n': '…¥', 'o': '·¥è', 'p': '·¥ò', 'q': '«´', 'r': ' Ä',
    's': 'Íú±', 't': '·¥õ', 'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x',
    'y': ' è', 'z': '·¥¢', ' ': ' ',

    # Chiffres
    '0': 'ùü¢', '1': 'ùü£', '2': 'ùü§', '3': 'ùü•', '4': 'ùü¶',
    '5': 'ùüß', '6': 'ùü®', '7': 'ùü©', '8': 'ùü™', '9': 'ùü´',

    # Symboles sp√©ciaux
    ':': 'Íûâ', '-': '‚àí', '_': 'Àç',

    # Valeurs sp√©cifiques
    'libx264': ' ü…™ ôxùü§ùü®ùü¶',
    'libx265': ' ü…™ ôxùü§ùü®ùüß',
    'libaom-av1': ' ü…™ ô·¥Ä·¥è·¥ç‚àí·¥Ä·¥†ùü£',
    'libvpx-vp9': ' ü…™ ô·¥†·¥òx‚àí·¥†·¥òùü´',
    'aac': '·¥Ä·¥Ä·¥Ñ',
    'libopus': ' ü…™ ô·¥è·¥ò·¥úÍú±',
    'copy': '·¥Ñ·¥è·¥ò è',
    'auto': '·¥Ä·¥ú·¥õ·¥è',
    'source': 'Íú±·¥è·¥ú Ä·¥Ñ·¥á',
    'on': '·¥è…¥',
    'off': '·¥èÍú∞Íú∞',
    'OG': '·¥è…¢',
    'original': '·¥è Ä…™…¢…™…¥·¥Ä ü',
    'embed': '·¥á·¥ç ô·¥á·¥Ö',
    'burn': ' ô·¥ú Ä…¥',
    'extract': '·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ',
    'select': 'Íú±·¥á ü·¥á·¥Ñ·¥õ',
    'first': 'Íú∞…™ ÄÍú±·¥õ',
    'copy_all': '·¥Ñ·¥è·¥ò è ·¥Ä ü ü',
    'film': 'Íú∞…™ ü·¥ç',
    'none': '…¥·¥è…¥·¥á',
    'sf': 'Íú±Íú∞',
    'yuv420p': ' è·¥ú·¥†ùü¶ùü§ùü¢·¥ò',
    'pass': '·¥ò·¥ÄÍú±Íú±',
    '\n': '\n',

}

def stylize_value(value: Any) -> str:
    """Stylise le texte mais laisse les balises HTML intactes."""
    if isinstance(value, bool):
        return '·¥è…¥' if value else '·¥èÍú∞Íú∞'

    if isinstance(value, Enum):
        value = value.value

    str_value = str(value)

    parts = TAG_PATTERN.split(str_value)

    styled_parts = []
    for part in parts:
        if TAG_PATTERN.fullmatch(part):
            styled_parts.append(part)
        else:
            if part in UNICODE_MAPPING:
                styled_parts.append(UNICODE_MAPPING[part])
            else:
                styled_parts.append(''.join(UNICODE_MAPPING.get(c, c) for c in part.lower()))

    return ''.join(styled_parts)